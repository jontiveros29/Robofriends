{"version":3,"sources":["Components/Card.js","CardList.js","Components/SearchBox.js","Components/Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","searchfield","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACzB,OACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,qBACnB,gCACI,6BAAKF,IACL,4BAAIC,WCYLK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,8BAEMA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAQ,cAAC,EAAD,CAERR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCEFC,EATG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAgC,EAAlBC,YAC/B,OACG,qBAAKV,UAAU,MAAf,SAEC,uBAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,OCKjGK,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YC6CJC,G,wDA5CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEd,YAAaa,EAAME,OAAOC,SAjB1C,EAAKC,MAAQ,CACTvB,OAAQ,GACRM,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBkB,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEpBF,MAAK,SAAAG,GACL,EAAKR,SAAS,CAAEpB,OAAQ4B,S,oBAU5B,WACI,MAAgCC,KAAKN,MAA7BvB,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,YACVwB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS5B,EAAY2B,kBAEzD,OAAKjC,EAAOmC,OAIR,sBAAKvC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcwB,KAAKX,iBAC5B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUlB,OAAQ8B,SAPhB,6C,GA9BDM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACF,cAAC,EAAD,IACLC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1c0548de.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n    return (\n        <div className=\"tc bg-light-pink dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt='robo' src={`https://robohash.org/${id}testing?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Components/Card';\n\nconst CardList = ({ robots }) => {\n    return (\n      <div>\n       {\n            robots.map((user, i) => {\n            return (<Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email}/>\n            );\n        })\n       }\n      </div>\n    );\n}\n\nexport default CardList;\n\n","import React from 'react';\n\nconst SearchBox = ({ searchChange, searchfield }) => {\n    return (\n       <div className='pa2'>\n         \n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={searchChange} />\n       </div>\n    );\n}\n\nexport default SearchBox;\n\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n\n\n","import React, { Component } from 'react'\nimport CardList from './CardList';\nimport SearchBox from './Components/SearchBox';\nimport Scroll from './Components/Scroll'\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=> {\n            return response.json();\n        })\n       .then(users => {\n        this.setState({ robots: users});\n       });\n        \n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        \n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        if (!robots.length) {\n            return <h1>Loading</h1>\n        } else {\n        return (\n            <div className='tc'>\n              <h1 className=\"f2\">RoboFriends</h1>\n              <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                 <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>      \n        );\n      }\n    }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \n\n\nReactDOM.render(\n       <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}